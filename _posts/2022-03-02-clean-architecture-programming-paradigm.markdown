---
layout: post
title: "[Clean Architecture] 프로그래밍 패러다임"
data: "2022-03-02 22:55:00 +0900"
tags: [all, cleanArchitecture, book]
comments: true
---

해당 포스트는 Robert C. Martin의 Clean Architecture 저서를 읽고 정리했다.
<br>
<br>

# 개요

패러다임이란 프로그래밍을 하는 방법으로, 대체로 언어에는 독립적이다. 패러다임은 다음과 같은 사항들을 결정한다.

- 어떤 프로그래밍 구조를 사용할지
- 언제 이 구조를 사용해야 하는지

<br>

# 구조적 프로그래밍

최초로 적용된 패러다임은 **구조적 프로그래밍**으로 1968년 에츠허르 비버 데이크스트라는 무분별한 점프(goto 문장)은 프로그램 구조에 해롭다는 사실을 제시했다. 데이크스트라는 이러한 점프들을 it/then/else와 do/whilte/until과 같은 더 익숙한 구조록 대체했다. 구조적 프로그래밍 패러다임은 아래와 같이 요약할 수 있다.

`구조적 프로그래밍은 제어 흐름의 직접적인 전환에 대해 규칙을 부과한다.`

<br>

# 객체 지향 프로그래밍

올레 요한 달과 크리스텐 니가드는 알골 언어의 함수 호출 스택 프레임을 힙heap으로 옮기면, 함수 호출이 반환된 이후에도 함수에서 선언된 지역 변수가 오랫동안 유지될 수 있을 발견했다. 바로 이러한 함수가 클래스의 생성자가 되었고, 지역 변수는 인스턴스 변수, 그리고 중첩 함수는 메서드가 되었다. 함수 포인터를 특정 규칙에 따라 사용하는 과정을 통해 필연적으로 다형성이 등장하게 되었다.

객체 지향 프로그래밍 패러다임은 아래와 같이 요약할 수 있다.

`객체 지향 프로그래밍은 제어흐름의 간접적인 전환에 대해 규칙을 부과한다.`

<br>

# 함수형 프로그래밍

알론조 처치는 앨런 튜링도 똑같이 흥미를 느꼈던 어떤 수학적 문제를 해결하는 과정에서 람다 계산법을 발명했는데, 함수현 프로그래밍은 이러한 연구 결과에 직접적인 영향을 받아 만들어졌다. 1958년 존 메카시가 만든 LISP 언어의 근간이 되는 개념이 바로 이 람다 계산법이다. 람다 계산법의 기초가 되는 개념은 **불변성 immuetablity**으로, 심볼 symbol의 값이 변경되지 않는다는 개념이다. 이는 함수형 언어에는 할당문이 전혀 없다는 뜻이기도 하다. 함수형 언어가 변수 값을 변경할 수 있는 방법을 제공하기는 하지만, 굉장히 까다로운 조건 아래에서만 가능하다. 함수형 프로그래밍 패러다임은 아래와 같이 요약할 수 있다.

`함수형 프로그래밍은 할당문에 대해 규칙을 부과한다.`

<br>

# 결론

각 패러다임은 프로그래머에게서 권한을 박탈한다. 어느 패러다임도 새로운 권한을 부여하지 않는다. 각 패러다임은 부정적인 의도를 가지는 일종의 추가적인 규칙을 부과한다. 즉, 패러다임은 무엇을 해야 할지를 말하기보다는 **무엇을 해서는 안 되는지**를 말해준다.

<br>

우리는 아키텍처 경계를 넘나들기 위한 메커니즘으로 다형성을 이용한다. 우리는 함수형 프로그래밍을 이용하여 데이터의 위치와 접근 방법에 대한 규칙을 부과한다. 우리는 모듈의 기반 알고리즘으로 구조적 프로그래밍을 사용한다.

<br>

세 가지 패러다임과 아키텍처의 세 가지 큰 관심사(함수, 컴포넌트 분리, 데이터 관리)가 어떻게 서로 연관되는지에 주목하자.

<br>

---

### 저서

- <a href="https://martinfowler.com" target="_blank">Martin C.Fowler</a>의 Clean Architecture

<br>

---
