---
layout: post
title: "[Clean Architecture] 소프트웨어 아키텍처"
data: "2022-03-02 22:55:00 +0900"
tags: [all, cleanArchitecture, book]
comments: true
---

해당 포스트는 Robert C. Martin의 Clean Architecture 저서를 읽고 정리했다.
<br>
<br>

소프트웨어 개발자라면 한 번쯤은 SA가 되리라고 꿈꿔봤을 것이다. 전체 시스템을 주무르고, 모든 업무를 꿰뚫어 보며, 쏟아지는 문제에 딱 맞는 기술을 도입하는 등 마치 전지전능한 신과 같이 동료들이 우러러보는 그런 존재 말이다.
아키텍쳐는 실제로 제공할수 있는 것 이상을 약속하기도 하지만, 약속한 것보다 많은 것을 제공할 때도 있다.
구조란 패러다임을 지배하고 소프트웨어 개발의 논의를 지배하는 무언가로서, 컴포넌트, 클래스, 함수, 모듈, 계층, 서비스가 그 예다.
소프트웨어를 제대로 만드는 일은 어렵다. 소프트웨어를 제대로 만들려면 적정 수준의 지식과 기술을 겸비해야 한다.
<br>

# 설계와 아키텍처란?

**'아키텍처'**는 **저수준의 세부사항과는 분리된 고수준의 무언가를 가리킬 때 흔히 사용**되는 반면, **‘설계’는 저수준의 구조 또는 결정사항 등을 의미**할 때가 많다. 하지만 설계와 아키텍쳐 사이에는 차이가 없다. 모든 고수준의 결정사항을 지탱하는 모든 세부사항을 자세하게 확인할 수 있다.

소프트웨어 설계에서도 저수준의 세부사항과 고수준의 구조는 모두 소프트웨어 전체 설계의 구성요소다. 이 둘은 단절 없이 이어진 작물과 같으며, 이를 통해 대상 시스템의 구조를 정의한다. 저수준에서 고수준으로 향하는 의사결정의 연속성만이 있을 뿐이다.

그렇다면 저수준에서 고수준으로 향하는 의사결정의 목표는 무엇인가? 소프트웨어 아키텍처의 목표는 필요한 시스템을 만들고 유지보수하는데 투입되는 인력을 최소화하는 데 있다.

소프트웨어 아키텍처를 심각하게 고려할 수 있으려면 좋은 소프트웨어 아키텍처가 무엇인지 이해해야 한다. 비용을 최소화하고 생산성은 최대화 할 수 있는 설계와 아키텍처를 가진 시스템을 만들려면, 이러한 결과로 이끌어줄 시스템 아키텍처가 지닌 속성을 알고 있어야 한다. 이 책은 휼룡하고 깔끔한 아키텍처와 설계가 무엇인지 설명하고, 이를 통해 소프트웨어 개발자가 장기간에 걸쳐 수익을 창출하는 시스템을 만들 수 있게 하고자 한다.
<br>

# 두 가지 가치에 대한 이야기

모든 소프트웨어 시스템은 이해관계자에게 행위 Behavior와 구조 Structure라는 서로 다른 두 가지 가치를 제공한다. 소프트웨어 개발자는 두 가치를 모두 반드시 높게 유지해야 하는 책임을 진다.

## 행위

소프트웨어의 첫 번째 가치는 행위다. 프로그래머는 이해관계자가 기능명세서나 요구사항 문서를 구체화할 수 있도록 도우며 이해관계자의 기계가 이러한 요구사항을 만족하도록 코드를 작성한다.

## 아키텍처

소프트웨어는 ‘부드러움을 지니도록’ 만들어졌다. 소프트웨어를 만든 이유는 **기계의 행위를 쉽게 변경**할 수 있도록 하기 위해서다. 다시 말해 소프트웨어는 변경하기 쉬워야 한다. 이해관계자가 기능에 대한 생각을 바꾸면, 이러한 변경사항을 간단하고 쉽게 적용할 수 있어야 한다. 이러한 변경사항을 적용하는데 드는 어려움은 변경되는 범위(scope)에 비례해야 하며, 변경사항의 형태(shape)와는 관련이 없어야 한다.

아키텍처가 특정 형태를 다른 형태보다 선호하면 할수록, 새로운 기능을 이 구조에 맞추는게 더 힘들어진다. 따라서 아키텍처는 형태에 독립적이여하고, 그럴수록 더 실용적이다.

## 더 높은 가치, 아이젠하워 매트릭스

소프트웨어의 첫 번째 가치인 행위는 긴급하지만 매번 높은 중요도를 가지는 것은 아니다. 소프트웨어의 두 번째 가치인 **아키텍처**는 중요하지만 즉각적인 긴급성을 필요로 하는 경우는 절대 없다. 하지만 긴급함과 중요함 사이에서 우선순위를 매긴다면 다음과 같이 순위를 낼 수 있다.

1. 긴급하고 중요한
2. 긴급하지 않지만 중요한
3. 긴급하지만 중요하지 않은
4. 긴급하지도 중요하지도 않은

**아키텍처**, 즉 **중요한 일**은 이 항목의 가장 높은 두 순위를 차지하는 반면, 행위는 첫 번째와 세 번째에 위치한다. 업무관리자와 개발자가 흔하게 저지르는 실수는 세 번째 항목인 긴급하지만 중요하지 않은 기능을 첫 번째로 격상시켜 버린다는 것이다. 이러한 실패로 인해 시스템에서 중요도가 높은 아키텍처를 무시한채 중요도가 떨어지는 기능을 선택하게 된다.

## 아키텍처를 위해 투쟁해라

자신이 믿는 가치를 위해 투쟁해라. 모든 부서에서 각자 자신들이 믿는 가치를 위해 투쟁을 한다. 개발자도 그래야 한다. 아키텍처가 후순위가 되면 시스템을 개발하는 비용이 더 많이 들고, 일부 또는 전체 시스템에 변경을 가하는 일이 현실적으로 불가능해진다. 이러한 상황이 발생하도록 용납했다면, 이는 결국 소프트웨어 개발팀이 스스로 옳다고 믿는 가치를 위해 충분히 투쟁하지 않았다는 뜻이다.

<br>

---

### 저서

- <a href="https://martinfowler.com" target="_blank">Martin C.Fowler</a>의 Clean Architecture

<br>

---
