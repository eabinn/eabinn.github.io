---
layout: post
title: "ISO 8601와 UTC"
data: "2022-02-27 14:47:00 +0900"
tags: [all, format]
comments: true
---

# ISO 8601

ISO 8601은 1988년 국제 표준화 기구(ISO)에 의해 공포된 날짜와 시간과 관련된 데이터 교환을 다루는 국제 표준이다.
이 표준의 목적은 날짜와 시간을 표현함에 있어 명백하고 잘 정의된 방법을 제공함으로써, 날짜와 시간의 숫자 표현에 대한 오해를 줄이고자함에 있다.

# ISO 8601의 몇 가지 보편적 원칙

- 날짜와 시간 값은 시간 단위의 가장 큰 것부터 가장 작은 것으로 정렬된다: 년도-월(혹은 주)-일T시-분-초)
- 날짜와 시간은 앞에 0을 붙여 유지해야 하는 고정된 자릿값을 가진다.
  > ex. 2022-02-27T14:05:00

# ISO 8601의 표준 시간대 정의자(timezone designator)

ISO 8601의 표준 시간대는 (불특정 위치의) 지역 시간(local time), UTC 혹은 UTC의 오프셋으로써 표현된다.

# ISO 8601의 기본적 형태

`2022-02-27T20:57:00+09:00`

1. 날짜와 시간 값은 큰 것부터 작은 것으로 정렬된다. 날짜와 시간 값은 앞에 0을 붙여 고정된 자릿값을 가진다.
2. +09:00은 우리나라의 UTC timezone offset이다. 우리나라 시간으로부터 UTC 시간을 얻으려면 시간에서 09:00을 빼면 된다.

# UTC

UTC는 Coordinated Universal Time의 줄임말로 1927년 1월 1일부터 시행된 국제 표준시이다. 세계에서 시간을 표현하는 표준시라고 보면 된다.
시간이 UTC일 경우에는 ISO 8601로 표현할 경우 시간 뒤에 빈틈 없이 Z를 써야 한다. Z는 오프셋이 0(+00:00)인 UTC를 위한 지역 지정자이다. 따라서 "20:25 UTC"의 경우에는 "20:25Z" 혹은 "2025Z", "20:25+00:00로 표현된다.

# UTC에서의 시간 오프셋(timezone offset)

UTC에서의 오프셋은 ±[hh]:[mm], ±[hh][mm], 혹은 ±[hh] 형식의 시간 뒤에 덧붙인다. 기술 중인 시간이 UTC보다 한 시간 앞선다면 지역 지정자(zone designator)는 "+01:00", "+0100" 혹은 간단히 "+01"가 될 수 있다.
UTC 너머의 시간을 표현하려면 음수의 오프셋을 사용한다. 예를 들어 겨울 기간의 뉴욕 시간은 UTC-05:00 이다.
UTC 시간을 계산하려면 오프셋만큼 빼야 한다. 따라서 겨울 기간의 뉴욕에서의 시간이 15:00-05:00 이면 15:00-(-05:00)를 해서 20:00 UTC를 얻게 된다.
한국의 경우에는 UTC+09:00 의 시간을 가지며 UTC 시간을 얻기 위해서는 9시간을 빼면 된다.

# 추가적인 내용

- GMT: GMT는 Greenwich Mean Time의 줄임말로 그리니치 평균시라고 불리며 런던을 기점을 하고 웰링턴에서 종점으로 설정되는 협정 세계시다.

<br>

---

# 참고

- <a href="https://ko.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601</a>
- <a href="https://twpower.github.io/29-iso8601-utc-and-python-example" target="_blank">[ISO] ISO 8601과 UTC 그리고 python 예제</a>

<br>

---
